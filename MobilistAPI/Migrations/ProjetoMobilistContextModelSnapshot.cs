// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobilistAPI.Models;

#nullable disable

namespace MobilistAPI.Migrations
{
    [DbContext(typeof(ProjetoMobilistContext))]
    partial class ProjetoMobilistContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobilistAPI.Models.Checklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ano")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Cor")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("DataHora")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("MarcaModelo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("NivelCombustivel")
                        .HasColumnType("float");

                    b.Property<string>("NomeMotorista")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observações")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Placa")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Quilometragem")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TelefoneMotorista")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PK__Checklis__3214EC271218D380");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("MobilistAPI.Models.DetalhesCarro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FileName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("IdChecklist")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Detalhes__3214EC2790333606");

                    b.HasIndex("IdChecklist");

                    b.ToTable("DetalhesCarro", (string)null);
                });

            modelBuilder.Entity("MobilistAPI.Models.FotosVeiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("IdChecklist")
                        .HasColumnType("int");

                    b.Property<int?>("IdLado")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__FotosVei__3214EC270091D146");

                    b.HasIndex("IdChecklist");

                    b.HasIndex("IdLado");

                    b.ToTable("FotosVeiculo", (string)null);
                });

            modelBuilder.Entity("MobilistAPI.Models.Iten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id")
                        .HasName("PK__Itens__3214EC27769E0B50");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("MobilistAPI.Models.ItensChecklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdChecklist")
                        .HasColumnType("int");

                    b.Property<int?>("IdItem")
                        .HasColumnType("int");

                    b.Property<bool?>("Possui")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__ItensChe__3214EC2706696EA7");

                    b.HasIndex("IdChecklist");

                    b.HasIndex("IdItem");

                    b.ToTable("ItensChecklist", (string)null);
                });

            modelBuilder.Entity("MobilistAPI.Models.Lado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Lados__3214EC27C660BFC7");

                    b.ToTable("Lados");
                });

            modelBuilder.Entity("MobilistAPI.Models.Peca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Pecas__3214EC2708C2AE61");

                    b.ToTable("Pecas");
                });

            modelBuilder.Entity("MobilistAPI.Models.PecasChecklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdChecklist")
                        .HasColumnType("int");

                    b.Property<int?>("IdPeca")
                        .HasColumnType("int");

                    b.Property<int?>("Situacao")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__PecasChe__3214EC27C62DD249");

                    b.HasIndex("IdChecklist");

                    b.HasIndex("IdPeca");

                    b.ToTable("PecasChecklist", (string)null);
                });

            modelBuilder.Entity("MobilistAPI.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MobilistAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MobilistAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobilistAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MobilistAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobilistAPI.Models.DetalhesCarro", b =>
                {
                    b.HasOne("MobilistAPI.Models.Checklist", "IdChecklistNavigation")
                        .WithMany("DetalhesCarros")
                        .HasForeignKey("IdChecklist")
                        .HasConstraintName("FK__DetalhesC__IdChe__4AB81AF0");

                    b.Navigation("IdChecklistNavigation");
                });

            modelBuilder.Entity("MobilistAPI.Models.FotosVeiculo", b =>
                {
                    b.HasOne("MobilistAPI.Models.Checklist", "IdChecklistNavigation")
                        .WithMany("FotosVeiculos")
                        .HasForeignKey("IdChecklist")
                        .HasConstraintName("FK__FotosVeic__IdChe__47DBAE45");

                    b.HasOne("MobilistAPI.Models.Lado", "IdLadoNavigation")
                        .WithMany("FotosVeiculos")
                        .HasForeignKey("IdLado")
                        .HasConstraintName("FK__FotosVeic__IdLad__46E78A0C");

                    b.Navigation("IdChecklistNavigation");

                    b.Navigation("IdLadoNavigation");
                });

            modelBuilder.Entity("MobilistAPI.Models.ItensChecklist", b =>
                {
                    b.HasOne("MobilistAPI.Models.Checklist", "IdChecklistNavigation")
                        .WithMany("ItensChecklists")
                        .HasForeignKey("IdChecklist")
                        .HasConstraintName("FK__ItensChec__IdChe__3E52440B");

                    b.HasOne("MobilistAPI.Models.Iten", "IdItemNavigation")
                        .WithMany("ItensChecklists")
                        .HasForeignKey("IdItem")
                        .HasConstraintName("FK__ItensChec__IdIte__3D5E1FD2");

                    b.Navigation("IdChecklistNavigation");

                    b.Navigation("IdItemNavigation");
                });

            modelBuilder.Entity("MobilistAPI.Models.PecasChecklist", b =>
                {
                    b.HasOne("MobilistAPI.Models.Checklist", "IdChecklistNavigation")
                        .WithMany("PecasChecklists")
                        .HasForeignKey("IdChecklist")
                        .HasConstraintName("FK__PecasChec__IdChe__4222D4EF");

                    b.HasOne("MobilistAPI.Models.Peca", "IdPecaNavigation")
                        .WithMany("PecasChecklists")
                        .HasForeignKey("IdPeca")
                        .HasConstraintName("FK__PecasChec__IdPec__412EB0B6");

                    b.Navigation("IdChecklistNavigation");

                    b.Navigation("IdPecaNavigation");
                });

            modelBuilder.Entity("MobilistAPI.Models.Checklist", b =>
                {
                    b.Navigation("DetalhesCarros");

                    b.Navigation("FotosVeiculos");

                    b.Navigation("ItensChecklists");

                    b.Navigation("PecasChecklists");
                });

            modelBuilder.Entity("MobilistAPI.Models.Iten", b =>
                {
                    b.Navigation("ItensChecklists");
                });

            modelBuilder.Entity("MobilistAPI.Models.Lado", b =>
                {
                    b.Navigation("FotosVeiculos");
                });

            modelBuilder.Entity("MobilistAPI.Models.Peca", b =>
                {
                    b.Navigation("PecasChecklists");
                });
#pragma warning restore 612, 618
        }
    }
}
